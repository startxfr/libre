---
# Start pre-tasks
- name: "start : Generate Instructor HTML book"
  include_role:
    name: session
    tasks_from: lib/book-generate-html
- name: "start : Start LIBRE-instructor web application for session {{ libre_session.id }}"
  docker_container:
    name: "libre-instructor-{{ libre_session.id }}"
    image: startx/libre-instructor:latest
    state: started
    volumes:
     - "/usr/share/libre/conf:/usr/src/app/config:ro"
     - "/usr/share/libre/course:/usr/src/app/course:ro"
     - "/usr/share/libre/collect:/usr/src/app/data:rw"
    ports:
     - "80:8080"
  become: yes
- name: "start : Start course {{ libre_course.id }}"
  include_tasks: "{{ r_session_dir_course }}/{{ training_dir_course_playbooks | default(r_session_dir_course_playbooks) }}/start.yml"
  when: r_session_dir_course_playbooks_details.stat.exists

- name: "start : Set session state to started"
  set_fact:
    libre_session: "{{ libre_session|combine({'state': 'started' }, recursive=True) }}"
# Use config to reload libre_session and record state to session file
- name: "start : Config {{ config_session.type }} session type reload"
  include_tasks: "config/{{ config_session.type }}.yml"

# Start tasks
- name: "start : Get previous report data"
  set_fact:
    previous_report: "{{ lookup('file', r_libre_result_file, errors='ignore') | default('') }}"
  delegate_to: localhost
- name: "start : Generate LIBRE report at {{ r_libre_result_file }}"
  template:
    src: libre_report-start.j2
    dest: "{{ r_libre_result_file }}"
#    owner: "{{ libre_user | default(r_libre_user) }}"
    group: "{{ libre_group | default(r_libre_group) }}"
    mode: 0666
  delegate_to: localhost
- name: "start : Log start action"
  include_role:
    name: libre
    tasks_from: lib/log
  vars:
    log_name: "Session {{ libre_session.id }} with course {{ libre_session.course }} is started"
    log_component: session
    log_action: start session {{ libre_session.id }}
