#!/bin/bash

ROOT_DIR=/usr/share/libre

LIBRE_VERSION="0.8.11"
LIBRE_TYPE=bootstrap
LIBRE_VERBOSE=true
LIBRE_DEBUG=false

# Default config var
CONFIG_DIR=$ROOT_DIR/conf
CONFIG_FILE=~/.libre/config.yml
INVENTORY_FILE=$CONFIG_DIR/inventory
SESSION_FILE=$CONFIG_DIR/session.json
ANSIBLE_RETURN=/tmp/libre.txt
ANSIBLE_ROOT=/usr/share/lib/libre-ansible

# load init files
function loadInits {
  if [[ -f $CONFIG_FILE ]] ; then
    LIBRE_DEBUG=$(cat $CONFIG_FILE | yq -r '.application.debug')
    LIBRE_VERBOSE=$(cat $CONFIG_FILE | yq -r '.application.verbose')
    LIBRE_TYPE=$(cat $CONFIG_FILE | yq -r '.application.type')
    ANSIBLE_ROOT=$(cat $CONFIG_FILE | yq -r '.application.ansible')
  fi
  if [[ -f $SESSION_FILE ]] ; then
    LIBREC_ID=$(cat $SESSION_FILE | jq -r '.course')
    LIBREC_NAME=$(cat $SESSION_FILE | jq -r '.type')
    LIBRES_ID=$(cat $SESSION_FILE | jq -r '.id')
    LIBRES_INSTRUCTOR=$(cat $SESSION_FILE | jq -r '.instructor')
  fi
}

# get and store the operating system name
OS=`cat /etc/os-release | grep "NAME" | head -n 1 | sed 's/NAME=//g' | sed 's/["]//g'`
OS_NAME=`cat /etc/os-release | grep "PRETTY_NAME" | sed 's/PRETTY_NAME=//g' | sed 's/["]//g'`

# use xterm and set current PID
export TERM=xterm
pid=0

# return if verbose is activated
function isVerbose {
    if [[ "$LIBRE_VERBOSE" == true || "$LIBRE_VERBOSE" == "true" || "$LIBRE_VERBOSE" == "True" ]] ; then
        return 1
    else
        return 0
    fi
}

# echo if verbose if activated
function echoVerbose {
    isVerbose
    if [ "$?" -eq 1 ] ; then
        echo "$@"
    fi
}

# echo if verbose if not activated
function echoNotVerbose {
    isVerbose
    if [ "$?" -eq 0 ] ; then
        echo "$@"
    fi
}

# return if debug is activated
function isDebug {
    if [[ "$LIBRE_DEBUG" == true || "$LIBRE_DEBUG" == "true" || "$LIBRE_DEBUG" == "True" ]] ; then
        return 1
    else
        return 0
    fi
}

# echo if debug if activated
function echoDebug {
    if [[ "$LIBRE_DEBUG" == true || "$LIBRE_DEBUG" == "true" || "$LIBRE_DEBUG" == "True"  ]] ; then
        echo "$@"
    fi
}

# echo an error
function echoError {
    echo "  ERROR ! $@"
}

# echo an error and exit
function echoFatal {
    echo "  FATAL ! $@"
    exit 1;
}

# echo an error and exit
function echoWarn {
    echo "  WARN  ! $@"
}

# echo an error and exit
function echoOK {
    echo "SUCCESS : $@"
}

# echo env if debug if activated
function echoEnv {
    if [[ "$LIBRE_DEBUG" == true || "$LIBRE_DEBUG" == "true" || "$LIBRE_DEBUG" == "True"  ]] ; then
        env | grep "LIBRE"
    fi
}

# status if libre install is done
function checkIfLibre {
  if [[ ! -d "$ROOT_DIR" ]] ; then
    echoError "LIBRE is not installed";
    echoError "Please run 'libre-installer' or see https://github.com/startxfr/libre/blob/stable/installer.md";
    echoError "for more information on how to install LIBRE";
    exit 1;
  fi
}

# status if config file exist
function checkIfConfig {
  if [[ ! -f $CONFIG_FILE ]] ; then
    echoError "LIBRE configuration doesn't exist in $CONFIG_FILE";
    echoError "Please run 'libre-installer' or see https://github.com/startxfr/libre/blob/stable/installer.md";
    echoError "for more information on how to install LIBRE";
    exit 1;
  fi
}

# status if session install is done
function checkIfSession {
  if [[ ! -f $SESSION_FILE ]] ; then
    echoError "Session configuration doesn't exist in $SESSION_FILE";
    echoError "Please run 'libre-session install' or see https://github.com/startxfr/libre/blob/stable/session.md";
    echoError "for more information on how to setup LIBRE session";
    exit 1;
  fi
}

# Display general welcome message
function coreWelcome {
cat <<EOF

Librairie d'outils pour l'environment de formation STARTX
Ne pas utiliser directement mais plutot les outils :

  libre-instructor   instructor workstation management
  libre-session      instructor session management
  libre-infra        instructor infrastructure management
  libre-student      student workstation management
  libre-lab          lab management

EOF
exit 0;
}

# Display information
function coreInformation {
  echoVerbose $1 "OS        : $OS_NAME"
  echoVerbose $1 "host      : $HOSTNAME"
  echoVerbose $1 "libre     : v$LIBRE_VERSION"
  echoVerbose $1 "type      : $LIBRE_TYPE"
  echoVerbose $1 "course    : $LIBREC_ID - $LIBREC_NAME"
  echoVerbose $1 "session   : $LIBRES_ID - $LIBRES_INSTRUCTOR"
  echoNotVerbose "running on $OS_NAME (libre v$LIBRE_VERSION)"
  echoNotVerbose "configured for $LIBREC_ID $LIBRE_TYPE"
}

# Display version
function coreVersion {
  echoVerbose "$1 $OS_NAME (libre v$LIBRE_VERSION)"
  echoNotVerbose $LIBRE_VERSION
  exit 0;
}

# execute an libre playbook file
function runLibrePlaybook {
  cd $ANSIBLE_ROOT &> /dev/null
  libretype=$1
  if [[ $libretype == "" ]] ; then
    libretype=$LIBRE_TYPE
  fi
  libreaction=$2
  if [[ $libreaction == "" ]] ; then
    libreaction="status"
  fi
  librefilter=$3
  if [[ $librefilter != "" ]] ; then
    librefilter="-e target=${@:3} ";
  else
    librefilter="-e target=local "
  fi
  if [[ ! -r $INVENTORY_FILE ]] ; then
    INVENTORY_FILE="inventory";
  fi
# export ANSIBLE_STDOUT_CALLBACK=yaml
  isDebug
  if [ "$?" -eq 1 ] ; then
    mv ansible.cfg ansible.cfg.back
    cp -f ansible.debug.cfg ansible.cfg
    ansible-playbook -i $INVENTORY_FILE $librefilter playbooks/${libretype}/${libreaction}.yml
    retc=$?
    mv -f ansible.cfg.back ansible.cfg
    cd - &> /dev/null
  else
    ansible-playbook -i $INVENTORY_FILE $librefilter playbooks/${libretype}/${libreaction}.yml
    retc=$?
    cd - &> /dev/null
  fi
  if [ $retc -eq 0 ]; then
    echoOK "Playbook ${libretype}/${libreaction} ended"
  else
    echoError "Playbook ${libretype}/${libreaction} ended with error"
  fi
  if [ -f $ANSIBLE_RETURN ]; then
    cat $ANSIBLE_RETURN | xargs --null echo -ne
    echo "" > $ANSIBLE_RETURN
  fi
  return $retc
}

# Display libre-* generic usage
function classroomGenericUsageSubcmd {
cat <<EOF
- Generic commands:
  usage             this message
  info              give information about libre configuration
  version           give the version of this tool
EOF
}


loadInits
checkIfLibre
checkIfConfig