#!/bin/bash

source /usr/local/lib/libre-core

# Display lab header message
function labHeader {
  isVerbose
  if [ "$?" -eq 1 ] ; then
    cat /usr/local/lib/libre-lab.txt
  fi
}

function labPlaybookCall() {
  if (ANSIBLE_CONFIG=/tmp/current_lab/ansible.cfg ansible-playbook /tmp/current_lab/$1.yml --syntax-check &> /dev/null) then
    isDebug
    if [ "$?" -eq 1 ] ; then
      ANSIBLE_CONFIG=/tmp/current_lab/ansible.cfg ansible-playbook /tmp/current_lab/$1.yml -e grade_result_file=/tmp/libre.txt
      retc=$?
      if [ $retc -eq 0 ]; then
        echoOK "Playbook ${1} ended"
      else
        echoError "Playbook ${1} ended with error"
      fi
    else
      ANSIBLE_CONFIG=/tmp/current_lab/ansible.cfg ansible-playbook /tmp/current_lab/$1.yml -e grade_result_file=/tmp/libre.txt 1> /tmp/a
      retc=$?
      if [ $retc -eq 0 ]; then
        ret=$(cat /tmp/a | tail -n 2 | head -n 1)
        echoOK $ret
        echoOK "Playbook ${1} ended"
      else
        cat /tmp/a | grep -A 30 "^fatal:"
        echoError "Playbook ${1} ended with error"
      fi
      echo "" > /tmp/a
    fi
  fi
}

# Call lab playbook
function labPlaybook {
  labHeader
  checkIfSession
  param=""
  if [[ $2 != "" ]] ; then
    param="local -e lab_current=$2";
  fi

  if [[ $1 == 'status' || $1 == 'list' ]] ; then
    runLibrePlaybook lab $1 $2;
    exit 0;
  fi

  if (runLibrePlaybook lab pre-$1 $param) then
    if [[ $1 == 'reset' ]] ; then
      labPlaybookCall "stop"
      labPlaybookCall "start"
    else
      labPlaybookCall $1
    fi
    runLibrePlaybook lab post-$1 $param
  fi
  exit 0;
}

# Display lab info and exit
function labInformation {
  labHeader
  checkIfSession
  coreInformation
  exit 0;
}

# Display lab welcome and exit
function labWelcome {
  labHeader
  coreInformation
  labUsage
  exit 0;
}

# Display version info and exit
function labVersion {
  coreVersion
  exit 0;
}

# Display libre-lab usage
function labUsage {
cat <<EOF

Lab training management command line.

Usage:
  libre-lab [command] [name|id]

- Lab management commands:
  start <name/id>  start the given lab. (Default start first lab)
  stop <name/id>   stop the given lab. (Default stop last lab)
  reset <name/id>  reset the given lab. (Default reset last lab)
  grade <name/id>  grade the given lab. (Default grade last lab)

- Information commands:
  status           get status of the current lab
  list             list all available labs

- Installation commands:
  install          install course repository cache
  uninstall        uninstall course repository cache
  update           update course repository cache
EOF
classroomGenericUsageSubcmd
}
